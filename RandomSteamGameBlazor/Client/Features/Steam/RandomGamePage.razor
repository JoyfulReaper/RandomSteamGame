@page "/random-game/{SteamId:long}"

@inject IJSRuntime _jsRuntime

@*TODO: Use Serilog or something*@
@inject ILogger<RandomGamePage> _logger

@inject HttpClient _client
@inject IHttpClientFactory _clientFactory
@inject NavigationManager _navigationManager

@implements IAsyncDisposable

@if (_appData is not null)
{
    <PageTitle>Random Game: @_appData.Name - By Kyle Givler</PageTitle>
}
else
{
    <PageTitle>Random Game - By Kyle Givler</PageTitle>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-warning" role="alert">
        @_errorMessage &nbsp; <a href="random-game/@SteamId">Reload page</a>
    </div>
}

@if (_appData is not null)
{
    <div class="row" id="mainContainer">
        <div class="col-12 col-md-5" id="main">
            <div id="randomGame">
                You should play:<br />
                <span class="fs-2" id="gameName">@_appData.Name</span><br />
                <div id="buttonContainer" class="mt-2">
                    <button type="button"
                        class="btn @(_isBusy ? "btn-warning" : "btn-primary")"
                        id="btnAgain"
                        disabled="@_isBusy"
                        @onclick="UpdateData">
                        @if (_isBusy)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        @(_isBusy ? "Loading..." : "Choose Again")
                    </button>
                    <a href="steam://run/@_appData.SteamAppid/" class="btn btn-success" id="steamUrl">Run game</a> <br />
                </div>
            </div>
        </div>
        <div class="col-12 col-md-7 my-5 my-md-0">
            <p class="fs-2" id="gameNameHeader">@_appData.Name</p>
            <span id="gameDescription">@((MarkupString)_appData.AboutTheGame)</span>
        </div>
    </div>
}
else
{
    <div class="text-center">
        <h1 class="text-white">Picking a game!</h1>
        <div class="spinner-border text-white" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code {
    [Parameter]
    public long? SteamId { get; set; }

    private AppData _appData = default!;
    private bool _isBusy = false;
    private string? _errorMessage;
    private string _background = default!;
    private string _prevBackground = string.Empty;
    private byte[]? _backgroundBytes = default!;

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        var backgroundClient = _clientFactory.CreateClient();
        _errorMessage = null;
        _isBusy = true;
        StateHasChanged();

        try
        {
            _appData = await _client.GetFromJsonAsync<AppData>($"api/Steam/RandomGameBySteamId/{SteamId}") ??
                throw new Exception("Unable to retreive games.");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _logger.LogError(ex, "Error getting random game for {steamId}.", SteamId);
        }

        try
        {
            if (_appData.Background is not null)
            {
                _background = _appData.Background;
                _backgroundBytes = await backgroundClient.GetByteArrayAsync(_background);
            }
            else
            {
                await RemoveBackground();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Failed to load background image :(";
            _logger.LogError(ex, "Error getting background image for {steamAppid}.", _appData.SteamAppid);
        }

        _isBusy = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetBackground("");
        }
        if (_prevBackground != _background && _backgroundBytes is not null)
        {
            await SetBackground($"data:image/image/jpeg;base64,{Convert.ToBase64String(_backgroundBytes)}");
            _prevBackground = _background;
        }
    }

    private async Task SetBackground(string background)
    {
        await _jsRuntime.InvokeVoidAsync($"setBackground", background);
    }

    private async Task RemoveBackground()
    {
        await _jsRuntime.InvokeVoidAsync($"resetBackground");
    }

    public async ValueTask DisposeAsync()
    {
        await RemoveBackground();
    }
}