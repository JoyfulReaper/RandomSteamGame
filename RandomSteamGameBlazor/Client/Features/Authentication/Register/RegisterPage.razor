@page "/register"
@inject HttpClient _httpClient
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage

<div class="row justify-content-center">
    <div class="col-12 col-md-6">
        <header class="border border-1 shadow-lg p-2 mb-3 text-center h3 radialGradient text-white">
            Register for the Random Steam Game Picker.
        </header>

        <Alert ErrorMessage="Registration not currently open, please check back soon!"
               ErrorClass="alert-danger" />

        <Alert SuccessMessage="@_successMessage" />

        <EditForm Model="_registerModel"
            OnSubmit="HandleRegister"
            class="p-2 border border-1 shadow-lg">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-1">
                <label for="firstName">First Name</label>
                <InputText class="form-control" id="firstName" @bind-Value="_registerModel.FirstName" />
            </div>
            <div class="mb-1">
                <label for="lastName">Last Name</label>
                <InputText class="form-control" id="lastName" @bind-Value="_registerModel.LastName" />
            </div>
            <div class="mb-1">
                <label for="email">Email</label>
                <InputText class="form-control" id="email" @bind-Value="_registerModel.Email" />
            </div>
            <div class="mb-1">
                <label for="password">Password</label>
                <InputText class="form-control"
                           id="password"
                           @bind-Value="_registerModel.Password"
                           type="password" />
            </div>
            <button class="btn btn-primary"
                    type="submit"
                    disabled>
                Register
            </button>
        </EditForm>

    </div>
</div>


@code {
    private RegisterModel _registerModel { get; set; } = new RegisterModel();
    private string? _successMessage;

    async Task HandleRegister()
    {
        return; // Don't want anyone registering right now since this is very much under development

        RegisterRequest registerRequest = new RegisterRequest(_registerModel.FirstName, _registerModel.LastName, _registerModel.Email, _registerModel.Password);
        using var result = await _httpClient.PostAsJsonAsync("api/auth/register", registerRequest);
        var response = await result.Content.ReadFromJsonAsync<AuthenticationResponse>();

        await LocalStorage.SetItemAsStringAsync("token", response.Token);
        await LocalStorage.SetItemAsStringAsync("refreshToken", response.RefreshToken);
        await AuthStateProvider.GetAuthenticationStateAsync();

        _successMessage = "Successfully Registered!";
    }

    private class RegisterModel
    {
        public string FirstName { get; set; } = default!;
        public string LastName { get; set; } = default!;
        public string Email { get; set; } = default!;
        public string Password { get; set; } = default!;
    }
}